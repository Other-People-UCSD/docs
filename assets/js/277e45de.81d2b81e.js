"use strict";(self.webpackChunkopm_documentation=self.webpackChunkopm_documentation||[]).push([[1186],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,u=d["".concat(l,".").concat(m)]||d[m]||h[m]||i;return n?a.createElement(u,r(r({ref:t},p),{},{components:n})):a.createElement(u,r({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,r[1]=s;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3994:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const i={title:"[...slug].js Dynamic Routing",sidebar_position:6,contributor:"Kevin Jang"},r=void 0,s={unversionedId:"calla-lily/dynamic-routing",id:"calla-lily/dynamic-routing",title:"[...slug].js Dynamic Routing",description:"As stated in the previous page, the TinaCMS data is what is fed into the rendered pages.",source:"@site/docs/calla-lily/06-dynamic-routing.md",sourceDirName:"calla-lily",slug:"/calla-lily/dynamic-routing",permalink:"/docs/calla-lily/dynamic-routing",draft:!1,editUrl:"https://github.com/Other-People-UCSD/docs/tree/main/docs/calla-lily/06-dynamic-routing.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"[...slug].js Dynamic Routing",sidebar_position:6,contributor:"Kevin Jang"},sidebar:"docsSidebar",previous:{title:"Data Layer",permalink:"/docs/calla-lily/data-layer"},next:{title:"API Endpoints",permalink:"/docs/calla-lily/api"}},l={},c=[{value:"Layout Modifications",id:"layout-modifications",level:2},{value:"Custom Components (bottom of TinaCMS editor frontmatter)",id:"custom-components-bottom-of-tinacms-editor-frontmatter",level:3},{value:"getStaticPaths",id:"getstaticpaths",level:3},{value:"getStaticProps -&gt; Recommendations",id:"getstaticprops---recommendations",level:3},{value:"Experimental Post Activation",id:"experimental-post-activation",level:3},{value:"SEO and Robots",id:"seo-and-robots",level:3}],p={toc:c},d="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"As stated in the previous page, the TinaCMS data is what is fed into the rendered pages. "),(0,o.kt)("p",null,"When you view the repository code, there is a ",(0,o.kt)("inlineCode",{parentName:"p"},"_posts")," directory that hosts all of the markdown pages of the literature and art that ends up being displayed on the website. The content of these pages is what ends up on the website, but the formatting of the files are templated into a different layout. This is done through the ",(0,o.kt)("inlineCode",{parentName:"p"},"pages")," file ",(0,o.kt)("inlineCode",{parentName:"p"},"[...slug].js"),". "),(0,o.kt)("p",null,"From the Next.js documentation on dynamic routing, the purpose is to create URLs for pages in a programmatic manner that even editors can do on their own. These URLs are based on the filepath from the ",(0,o.kt)("inlineCode",{parentName:"p"},"_posts")," directory. "),(0,o.kt)("p",null,"When an editor publishes a new work they must create a new file and give it a title. This title is previewed as the filename which will be used as the public URL. Developers can do the same thing through the filesystem but with the added benefit of being able to rename the files and thus change the URL. The ",(0,o.kt)("inlineCode",{parentName:"p"},"[...slug]")," is the syntax for a catch-all segment and this is what collects the subdirectory paths to the filenames."),(0,o.kt)("h2",{id:"layout-modifications"},"Layout Modifications"),(0,o.kt)("p",null,"The purpose of this ",(0,o.kt)("inlineCode",{parentName:"p"},"[...slug].js")," for generating static pages at Other People is to provide different layout schemes if necessary to the posts. Since most posts use the same layout, this template page suffices. However, for specific themes or components like content warnings or experimental posts such as ",(0,o.kt)("inlineCode",{parentName:"p"},"2023/missed-connections"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"[...slug].js")," file can read in specific information from the markdown file to do additional operations and even modify the layout without having to define other public pages in the ",(0,o.kt)("inlineCode",{parentName:"p"},"pages")," directory."),(0,o.kt)("h3",{id:"custom-components-bottom-of-tinacms-editor-frontmatter"},"Custom Components (bottom of TinaCMS editor frontmatter)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Add JS files that affect all posts\nuseEffect(() => {\n  copyright();\n  pageChange(data.post.theme);\n}); // Does not trigger once to ensure copyright effect works\n")),(0,o.kt)("p",null,"The copyright and page change functions are respectively defined in the ",(0,o.kt)("inlineCode",{parentName:"p"},"lib/copyright.js")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"lib/bgTheme.js")," files. Both are automatically called when the literature or arts webpage is loaded. "),(0,o.kt)("p",null,"Copyright, or copy-preventing pages has its own documentation decision change at the ",(0,o.kt)("a",{parentName:"p",href:"docs/pink-currents/adr/copyright-protections"},"Pink-Currents ADR"),". Every work should disable copy actions on the pages to reduce the chance of plagarism and reposting the works online without permission."),(0,o.kt)("p",null,"The reason why the background theme is called on every load is because one work might force the theme to dark mode as the work is intended to be viewed that way while other works use the user's system theme preference. If the theme was stuck on dark mode without going back to the user's default theme, this might ruin their user experience."),(0,o.kt)("h3",{id:"getstaticpaths"},"getStaticPaths"),(0,o.kt)("p",null,"This is the most important part of the dynamic routing system as it figures out the path of each post and stores it for statically generating all paths created in ",(0,o.kt)("inlineCode",{parentName:"p"},"[...slug].js"),". It uses the GraphQL paginated data of all posts and iterates over each page to create the pathnames. "),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"The commented-out parts in getStaticPaths and getPageData is the process to remove the year subdirectory from the public URLs. Although it visually does not produce any errors for the end user, it causes the console to throw many errors about 404 resource not found. It is not advised to enable this because there could be more side-effects. The new URLs have been resolved as a note in the 404 page describing the change.")),(0,o.kt)("h3",{id:"getstaticprops---recommendations"},"getStaticProps -> Recommendations"),(0,o.kt)("p",null,"The recommendation results generated by the recommendation model built in ",(0,o.kt)("a",{parentName:"p",href:"docs/recommendation-system"},"docs/recommendation-system")," is fetched here and then fed through the app context to enable recommendations in the search results. Refer to the ",(0,o.kt)("a",{parentName:"p",href:"docs/calla-lily/search"},"docs/calla-lily/search")," for a more detailed explanation of what it does."),(0,o.kt)("h3",{id:"experimental-post-activation"},"Experimental Post Activation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"export const Experimental = ({ title }) => {\n    useEffect(() => {\n        switch (title) {\n            // Vanilla JS using document or window\n        }\n    });\n\n    switch (title) {\n        return <Script \n          src={}\n          onReady={() => {\n            // Do something after importing a JS file is complete \n            // Vanilla JS using document or window\n          }}\n        />\n    }\n}\n")),(0,o.kt)("p",null,"There are two ways to define the running operations of scripts using ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect")," or adding a ",(0,o.kt)("inlineCode",{parentName:"p"},"Next/Script")," to the webpage. The ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect")," should be used when there is no external JavaScript file to import for that work. Usually this is for a small modification that requires selecting elements and doing something with them."),(0,o.kt)("p",null,"The section that is not within the ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect")," block usually returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"Next/Script")," and appends it to the webpage. This is usually used when there is a larger script payload such as running truly experimental works such as ",(0,o.kt)("inlineCode",{parentName:"p"},"missed-connections")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"you-have-created-an-imaginary-friend"),". The additional methods in the ",(0,o.kt)("inlineCode",{parentName:"p"},"onReady")," function are meant to perform operations that are specific to that work because the imported JavaScript file is usually a generic, modular program to run an operation. Therefore, the program is able to be reused for other experimental works without changing much inside the program."),(0,o.kt)("h3",{id:"seo-and-robots"},"SEO and Robots"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'<Head>\n  <meta name="robots" content="all"/>\n  <meta name="robots" content="noimageindex"/>\n</Head>\n<NextSeo\n  canonical={canonical}\n  description={excerpt}\n  excerpt={excerpt}\n  openGraph={{\n    type: \'article\',\n    images: [{ url: previewImg }],\n}}\n/>\n')),(0,o.kt)("p",null,"Posts usually have a 100/100 Lighthouse SEO score and one of the factors responsible for it is the meta tags which control the indexing permissions granted to site crawlers. The first meta tag allows all crawling and indexing permissions, yet the second tag overwrites and disallows the image indexing permission. This should prevent artwork from being displayed in search results to prevent them from being copied directly there. "),(0,o.kt)("p",null,"The NextSeo tag activates previews that are displayed on social cards when the link to the page is posted and shared. It will get an excerpt of the first lines in the work and display the thumbnail illustration if available. The excerpt has already been cleaned of HTML tags and newline symbols through a function that gets the post data in ",(0,o.kt)("inlineCode",{parentName:"p"},"getPostDataAPI()")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"lib/posts.js"),"."))}h.isMDXComponent=!0}}]);