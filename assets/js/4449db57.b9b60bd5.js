"use strict";(self.webpackChunkopm_documentation=self.webpackChunkopm_documentation||[]).push([[2715],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),h=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=h(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=h(a),c=i,u=m["".concat(s,".").concat(c)]||m[c]||p[c]||o;return a?n.createElement(u,r(r({ref:t},d),{},{components:a})):n.createElement(u,r({ref:t},d))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,r[1]=l;for(var h=2;h<o;h++)r[h]=a[h];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},7780:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>h});var n=a(7462),i=(a(7294),a(3905));const o={title:"Post Schema & Data",sidebar_position:4,contributor:"Kevin Jang"},r=void 0,l={unversionedId:"calla-lily/schema",id:"calla-lily/schema",title:"Post Schema & Data",description:"Post Frontmatter",source:"@site/docs/calla-lily/04-schema.md",sourceDirName:"calla-lily",slug:"/calla-lily/schema",permalink:"/docs/calla-lily/schema",draft:!1,editUrl:"https://github.com/Other-People-UCSD/docs/tree/main/docs/calla-lily/04-schema.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Post Schema & Data",sidebar_position:4,contributor:"Kevin Jang"},sidebar:"docsSidebar",previous:{title:"Rebuild Release Notes",permalink:"/docs/calla-lily/calla-lily-release"},next:{title:"Data Layer",permalink:"/docs/calla-lily/data-layer"}},s={},h=[{value:"Post Frontmatter",id:"post-frontmatter",level:2},{value:"Usage in Next.js",id:"usage-in-nextjs",level:3},{value:"SEO",id:"seo",level:4},{value:"The TinaCMS Schema",id:"the-tinacms-schema",level:3},{value:"Homepage, Team, Schema",id:"homepage-team-schema",level:2},{value:"<code>forms.json</code> Data",id:"formsjson-data",level:2}],d={toc:h},m="wrapper";function p(e){let{components:t,...a}=e;return(0,i.kt)(m,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"post-frontmatter"},"Post Frontmatter"),(0,i.kt)("p",null,"Posts store metadata about their information through frontmatter written at the top of the file. The current frontmatter has the following frontmatter with asterisks indicating the field is required:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Layout (default Post)","*","*",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The layout template to use. "),(0,i.kt)("li",{parentName:"ul"},"Not modifiable by editors."),(0,i.kt)("li",{parentName:"ul"},"Works created in Collection 6 or later and after 2023 may not have this field. It is completely optional due to how the layout is handled in ",(0,i.kt)("inlineCode",{parentName:"li"},"[...slug].js"),"."))),(0,i.kt)("li",{parentName:"ul"},"Title","*",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The title of the story to be displayed in the ",(0,i.kt)("inlineCode",{parentName:"li"},"<h1>")," tag."))),(0,i.kt)("li",{parentName:"ul"},"Date","*",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The date the post was published. Used in post sorting and SEO sitemap crawling."))),(0,i.kt)("li",{parentName:"ul"},"Contributor(s)","*",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The authors of the prose or artwork on the page."))),(0,i.kt)("li",{parentName:"ul"},"Tags","*",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Genres, highly general semantic details about what the post represents."))),(0,i.kt)("li",{parentName:"ul"},"Collection",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The collection number of a post if applicable."))),(0,i.kt)("li",{parentName:"ul"},"Thumbnail",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The thumbnail to display on the post preview cards."))),(0,i.kt)("li",{parentName:"ul"},"manualWC","*","*",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This is an optional field to give custom-coded posts a word count that cannot be automatically generated. "),(0,i.kt)("li",{parentName:"ul"},"Not modifiable by editors. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Not specified in TinaCMS")," ")))),(0,i.kt)("p",null,"as well as special frontmatter options that are defined further in special functions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Theme",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If a work is meant to be viewed in light mode or dark mode, force the theme to it."))),(0,i.kt)("li",{parentName:"ul"},"Content Warning",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Warns the reader with an overlay mentioning the sensitive triggers. ")))),(0,i.kt)("h3",{id:"usage-in-nextjs"},"Usage in Next.js"),(0,i.kt)("p",null,"The information stored in the frontmatter key-value pairs is used in various areas of the website. Almost all of the fields are used in the main post generator page ",(0,i.kt)("inlineCode",{parentName:"p"},"[...slug].js")," where the information fills in the values of JSX elements for rendering on the client side. Some of the fields can be used as conditional variables as well, so it is essential to know how these fields interact with the page. "),(0,i.kt)("h4",{id:"seo"},"SEO"),(0,i.kt)("p",null,"Date represents the time the post was published, and as such, it should be used in SEO to represent when the page was last updated. This serves to announce to web crawlers that the website updates often and consequently causes the crawler to index the website more frequently as compared to other websites."),(0,i.kt)("h3",{id:"the-tinacms-schema"},"The TinaCMS Schema"),(0,i.kt)("p",null,"TinaCMS is a headless CMS, meaning that it can connect to any frontend app and communicate through an API. The TinaCMS schema represents how the Tina API references files on the filesystem and interacts with it through specified fields. You can read more about how the schema works through the official TinaCMS documentation. In Calla-Lily, the schema for posts is defined for the above frontmatter as well as a ",(0,i.kt)("inlineCode",{parentName:"p"},"body")," field to point to the content of the post below the frontmatter. "),(0,i.kt)("h2",{id:"homepage-team-schema"},"Homepage, Team, Schema"),(0,i.kt)("p",null,'The homepage schema data is stored in a JSON file instead of a markdown file of the homepage. This is because the homepage has a limited range of elements that should be modifiable by editors and the rest should not be modified to maintain functionality. It would not be a good idea to let the autogenerated genre cards be vulnerable to edits when the algorithm behind it is not exposed to the editor. Therefore, keeping the "frontmatter" in a separate file makes it more maintainable by both editors and developers. These separate files are kept in the ',(0,i.kt)("inlineCode",{parentName:"p"},"data")," directory to indicate that they are editable by editors and can be used in more than one file in the website. This is explained further in the ",(0,i.kt)("inlineCode",{parentName:"p"},"forms.json")," section."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Pink-Currents used to use YAML syntax in frontmatter for the homepage or team page for this data. The choice to use JSON was used because Next.js could not read the data from a separate YAML file and put into a JS file through the default webpack configuration. To prevent unncessary complexity, we changed the syntax of the data to JSON because it did not require any changes to the configuration to access.")),(0,i.kt)("h2",{id:"formsjson-data"},(0,i.kt)("inlineCode",{parentName:"h2"},"forms.json")," Data"),(0,i.kt)("p",null,"The fields in the ",(0,i.kt)("inlineCode",{parentName:"p"},"forms.json"),' file include areas for submission form URLs, team application URLs, and the footer navigation. These items are used separately in the submission and team pages, so why are they in a single file? To reduce how many files the developer has to click through, we combined similar field data into a centralized file. This allows us to essentially "template" using the data in this central file instead of having several fields with the same data that must all be changed individually. By making those fields point to the data in this centralized file, the edits will be seen in those areas all at once. This makes maintaining the data simpler as verifying that the component works in one part should result in the component working in the other parts of the website. '),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"The downside to keeping a centralized file like this is that TinaCMS's live preview function (explained in Tina docs and the next page) will not have a specific file to preview all of the components. It could be worthwile to define a development-only page to test that all of the field components work or just making a note of where each component occurs so that the data can be checked with ease.")))}p.isMDXComponent=!0}}]);