"use strict";(self.webpackChunkopm_documentation=self.webpackChunkopm_documentation||[]).push([[5046],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var h=n.createContext({}),l=function(e){var t=n.useContext(h),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=l(e.components);return n.createElement(h.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,h=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(a),c=o,g=p["".concat(h,".").concat(c)]||p[c]||u[c]||r;return a?n.createElement(g,i(i({ref:t},d),{},{components:a})):n.createElement(g,i({ref:t},d))}));function g(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=c;var s={};for(var h in t)hasOwnProperty.call(t,h)&&(s[h]=t[h]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},254:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var n=a(7462),o=(a(7294),a(3905));const r={title:"Choose Your Own Adventure (CYOA) Workflow",date:new Date("2023-05-31T07:00:00.000Z"),contributor:"Kevin Jang"},i=void 0,s={unversionedId:"projects/cyoa-workflow",id:"projects/cyoa-workflow",title:"Choose Your Own Adventure (CYOA) Workflow",description:"Written as used in Calla-Lily",source:"@site/docs/projects/cyoa-workflow.md",sourceDirName:"projects",slug:"/projects/cyoa-workflow",permalink:"/docs/projects/cyoa-workflow",draft:!1,editUrl:"https://github.com/Other-People-UCSD/docs/tree/main/docs/projects/cyoa-workflow.md",tags:[],version:"current",frontMatter:{title:"Choose Your Own Adventure (CYOA) Workflow",date:"2023-05-31T07:00:00.000Z",contributor:"Kevin Jang"},sidebar:"docsSidebar",previous:{title:"Projects",permalink:"/docs/category/projects"},next:{title:"Typewriter Workflow",permalink:"/docs/projects/typewriter-workflow"}},h={},l=[{value:"Abstract",id:"abstract",level:2},{value:"Context",id:"context",level:2},{value:"Timeline",id:"timeline",level:2},{value:"Data Pipeline",id:"data-pipeline",level:2},{value:"Raw Text Data Editing and Storage",id:"raw-text-data-editing-and-storage",level:3},{value:"Data Extraction",id:"data-extraction",level:3},{value:"Data Transformation",id:"data-transformation",level:3},{value:"Data Storage",id:"data-storage",level:3},{value:"Algorithm",id:"algorithm",level:2},{value:"UX/UI Design",id:"uxui-design",level:2},{value:"Future Extensions",id:"future-extensions",level:2}],d={toc:l},p="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Written as used in Calla-Lily")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.otherpeoplesd.com/6/you-have-created-an-imaginary-friend"},"You Have Created An Imaginary Friend")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/Other-People-UCSD/Calla-Lily/blob/main/public/js/cyoa.js"},"cyoa.js (source code)")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.otherpeoplesd.com/js/imaginary-friend-theo-erickson.json"},'"You Have Created An Imaginary Friend" JSON data')),(0,o.kt)("h2",{id:"abstract"},"Abstract"),(0,o.kt)("p",null,"The choose-your-own-adventure (CYOA) program is meant to give the end user a more understandable experience of the story\nby allowing them to see their progress through the story. This documentation goes through the CYOA workflow using Theo\nErickson\u2019s \u201cYou Have Created An Imaginary Friend\u201d story as a reference."),(0,o.kt)("h2",{id:"context"},"Context"),(0,o.kt)("p",null,"Many CYOA stories may be drafted as a Twine or other dialogue story file. Twine has an undo and redo feature for\npassages, but lacks any progress indicator for the user to see how long the story is. This lack of indicator can confuse\nusers who think there isn\u2019t more to the story if they get lost and keep repeating routes. In addition, publishing a\nTwine file can take the form of a third-party website that we cannot manage, or a standalone HTML file. That HTML file\ndoes not work well with the Jekyll-based and React-based website\u2019s ability to template an HTML page. For an enhanced UX\nand UI experience that can natively run on the Other People Website via DOM injection, our own CYOA program is used."),(0,o.kt)("h2",{id:"timeline"},"Timeline"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"February 24, 2023 - April 11, 2023: Minimum Viable Product of cyoa.js"),(0,o.kt)("li",{parentName:"ul"},"February 24, 2023 - April 21, 2023: Creative Edits on story"),(0,o.kt)("li",{parentName:"ul"},"April 22, 2023 - May 24, 2023: Copy Edits on story"),(0,o.kt)("li",{parentName:"ul"},'May 23, 2023 - May 31, 2023: Final cyoa.js Website Edits for "You Have Created An Imaginary Friend"'),(0,o.kt)("li",{parentName:"ul"},'June 2, 2023: Public release of "You Have Created An Imaginary Friend"')),(0,o.kt)("h2",{id:"data-pipeline"},"Data Pipeline"),(0,o.kt)("h3",{id:"raw-text-data-editing-and-storage"},"Raw Text Data Editing and Storage"),(0,o.kt)("p",null,"It can be difficult for staff editors to edit the story off Twine when the Twine file does not syncronize editing state\nwhen it can only be imported by a .twine file. Instead, CYOA stories should be written in a collaborative text editor\nsuch as Google Docs where all viewers will see the same version. To organize the story, each passage should be on its\nown page. Adding a header such as the route or id number allows for internal hyperlinks to work where routes from other\npassages can link to and it makes stepping through the story arc feel very similar to Twine or the CYOA program."),(0,o.kt)("h3",{id:"data-extraction"},"Data Extraction"),(0,o.kt)("p",null,"After completing the story in a collaborative text editor, the raw text is put into a spreadsheet. This is necessary to\norganize the data in a way that a popular programming language can read rather than using something like Google Apps\nScript to extract the spreadsheet data, especially if a passage extends more than one page. The downside of using a\nspreadsheet is that it is harder to review the raw text as compared to a text editor, so this is something that the\nwebsite developer is expected to set up."),(0,o.kt)("p",null,"The main columns for the spreadsheet are ",(0,o.kt)("strong",{parentName:"p"},"id "),"(unique) and ",(0,o.kt)("strong",{parentName:"p"},"passage text"),". Passage text includes the main text to display on\nthe story, but not the routes the user can click on. Instead, routes are saved in a two-column repeating form where the\nfirst column is the ",(0,o.kt)("strong",{parentName:"p"},"id to route to")," and the second is the ",(0,o.kt)("strong",{parentName:"p"},"route text"),". This is repeated in the spreadsheet such that\nindividual route options can be modified in an easier fashion rather than adding all routes into one spreadsheet cell\nwith some delimiter to separate them."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"| id | passageText | to | text | to | text | ...")),(0,o.kt)("p",null,"After transferring the raw text to the spreadsheet, passages that require further interactivity can have the text\nmodified to include HTML/CSS elements such as buttons or different styles. JavaScript can be added to the text here, but\nit will not activate on the React-based website. Instead, the CYOA program automatically adds the interactive event\nlisteners on-demand during program execution."),(0,o.kt)("p",null,"Exporting spreadsheet data commonly takes upon a delimiter-separated format. Google Sheets and Excel support both\ncomma-separated values and tab-separated values, but only tab-separated values work effectively here. This is because\nstorywriting often uses commas when writing dialogue, so those commas in ",(0,o.kt)("strong",{parentName:"p"},"passage text")," will affect how the column-based\ndata is separated and read. Instead, tab-separated values will usually work because intentional tabs are rarer in\nstorywriting and thus tab occurrences in the text can be replaced with unicode encodings. It would not be friendly to\nread data that has hundreds of unicode-encoded commas scattered in every passage."),(0,o.kt)("h3",{id:"data-transformation"},"Data Transformation"),(0,o.kt)("p",null,"The exported .tsv file must be slightly modified such that each passage of the story is on its own page. Sometimes, the\npassage text might create line breaks between paragraphs that mess with the way the .tsv file got saved. Removing the\nline breaks and then using ",(0,o.kt)("strong",{parentName:"p"},"double spaces "),"between the paragraphs will ensure that the tsv file has the same number of\nlines as the number of passages in the story."),(0,o.kt)("p",null,"The reason why paragraphs have their own double-spaced delimiter inside the tsv is because the hybridized text may be\nraw text or HTML. If a passage is raw andtext there are multiple paragraphs, the data has to understand that there are\nmultiple paragraphs that cannot be demarcated by a single space since a story will have spaces throughout it. Double\nspaces are rarer and can be unicode-encoded as well. Another option is to just change the delimiter used to something\nelse."),(0,o.kt)("p",null,"The .tsv file should now be formatted at this stage. To extract the data from the .tsv file, a Python script is used.\nThe main reason why this data extraction and transformation is done in Python instead of JavaScript is because it was\neasier to work with data locally through a notebook instead of waiting for an synchronous HTTP request to get the data\nfrom the .tsv file and then transforming it into JSON that could be used more easily in the program. The python\nalgorithm reads the tsv file line by line and creates a JSON object in the following format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"{\n  \u201cstory\u201d: [\n    \u201cid\u201d: Number,\n    \u201cpassageText\u201d: [String],\n    \u201croutes\u201d: [ { \u201cto\u201d: Number, \u201ctext\u201d: String }]\n  ]\n}\n")),(0,o.kt)("p",null,"The diagram below shows the directed graph in tree format of the eighty paths in \u201cYou Have Created An Imaginary Friend\u201d.\nThere are 126 paths with 33 of them going back to start."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"A directed graph in tree form of the routes.",src:a(2683).Z,width:"1295",height:"1295"})),(0,o.kt)("h3",{id:"data-storage"},"Data Storage"),(0,o.kt)("p",null,"This JSON object is written to a .json file which will then be stored inside the /public/js folder on the website. The\nobject is already minified from the python script so there is no need to expand it unless edits to the story data need\nto be made. ",(0,o.kt)("strong",{parentName:"p"},"The \u201cYou Have Created An Imaginary Friend\u201d JSON file is 85.1 KB in size.")," It is also a more hidden resource\nthat cannot be found on the sources tab in the /js folder, but can still be identified by looking through the network\nlog."),(0,o.kt)("p",null,"As for the webpage where the data is deployed, the markdown file content must contain an element with the id \u201cstory-ref\u201d\nfor the program to find the filename of the JSON file. There must also be a div with the id \u201coutput-text\u201d where the\nalgorithm writes the passage data to. Optionally, there is a progress container for the progress bar and a reset button."),(0,o.kt)("h2",{id:"algorithm"},"Algorithm"),(0,o.kt)("p",null,"Refer to the JSDocs documentation for information on the specific functions. Otherwise, this is a general workflow of\nhow the program operates."),(0,o.kt)("p",null,"When the webpage is loaded, the program will fetch the data stored in the JSON file. It will store the data in a global\nvariable that allows the program to refer to the data as the user goes through the story. In addition, loading the\nwebpage by either navigating away or hard refreshing the page will reset any route history the reader has had before."),(0,o.kt)("p",null,"Passages are written according to their ",(0,o.kt)("strong",{parentName:"p"},"0-indexed")," position in the stored array. If the passage text is identified as\ntext when there are no HTML tags present in it, then the text will be appended to the page in a paragraph tag. Otherwise\nthe text is in HTML format and is directly appended to the page. If there are buttons in the HTML paragraph, event\nlisteners will be added to them based on the events that were passed in as attributes to the button."),(0,o.kt)("p",null,"After appending the passage text to the screen, the route options are created. Each option is a button list item with a\nclickable event listener function that will display the route in bold once it is clicked on, updates the visited state\nof the taken route, and shows that next passage. These options are styled based on their visited state: red for not\nvisited, orange for partially visited but some subroutes have not been visited yet, and green for fully visited."),(0,o.kt)("p",null,"This route visited state is stored in a ",(0,o.kt)("strong",{parentName:"p"},"0-indexed array")," with length to the number of passages in the story. Whenever the\nvisited state of a route changes, the state is stored in local storage so that the reader can keep track of their\nprogress. In addition, a history stack will push the traveled passage id to allow the user to go back if they would like\nto. It does not make practical sense to have a redo button when the list of options will also display again. If a route\nhas reached the end, then it is marked as fully visited and given a value of 2 in the array. When this happens, ",(0,o.kt)("strong",{parentName:"p"},"changes\nare bubbled up")," through the directed graph of the story by using the history array. This function improves user\nunderstanding of where they have gone as the entire leaf of a route tree will turn green, allowing the user to pick the\nother branches at the intersection to continue reading unexplored paths in the story."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Diagram showing bubbling coloration of passages up a route leaf.",src:a(3373).Z,width:"671",height:"571"})),(0,o.kt)("p",null,"The limitation of this bubbling up of state is that other parent routes that will satisfy the fully visited condition\nwill not be affected because this is dependent on the history stack. This can have potential side effects up the tree,\nas nodes 66 and 67 in the following diagram should both be green after the user routes to node 71. Solving this case may\nimprove coverage for the user at the cost of algorithmic efficiency to color routes."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Diagram showing bubbling state only through the history and not other valid parents.",src:a(6290).Z,width:"862",height:"352"})),(0,o.kt)("p",null,"The progress bar updates when an unvisited route is clicked on. There have been reported cases where it can go one over\nthe number of passages in the story. To resolve this, once all routes have been visited the progress bar is set to the\nnumber of passages in the story and sets all route states to completely visited."),(0,o.kt)("p",null,"Some paragraphs contain special actions that extend the functionality of displaying passages. While it is possible to\ntry to run actions on every passage, it is optimal to run an action only if the passage has an action. These actions are\noften dependent on conditions to function, so refer to the program code to see how each action is run. For example, the\nmain passage where the reader starts from has a fifth route that is hidden if the reader hasn\u2019t reached the true main\nroute of the story. This action checks local storage for the variable that keeps this state and then unhides the route\nif the condition is met. Other events include adding special event listeners to elements that don\u2019t act like the usual\nbuttons with events that are already handled when the passage is created."),(0,o.kt)("p",null,"The reset button is implemented as a way to reset the visited states over the routes and any local storage variables\nassociated with the story. This currently works over \u201cYou Have Created An Imaginary Friend\u201d\u2019s local storage variables\nbut there are multiple ways to conditionally reset the variables associated with the story being displayed. That is\nsomething that can be exported in the future when this case arises."),(0,o.kt)("p",null,"\u201cYou Have Created An Imaginary Friend\u201d has a special function that allows the user to input their own text and see it\ndisplayed on the page. This includes a text input for a story title as well as a textarea that resizes itself so it\nwon\u2019t take up too much space and lets the user see everything they have typed instead of a scrollable element. This\nstorywriting component also has an option to save the user\u2019s story. This is done by creating a temporary hidden link and\nattaching events to download a text file with the story encoded into it, then automatically clicking it using\nJavaScript."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Screenshot showing the passages a user can create a story.",src:a(9358).Z,width:"1191",height:"741"})),(0,o.kt)("h2",{id:"uxui-design"},"UX/UI Design"),(0,o.kt)("p",null,"With the assistance of Katie Lew, the UI designer, changes were made to make the progress bar narrower and other spacing\nbetween text. End users have a better context about how routes and inline buttons that had actions were clickable by\nadding hovering styles that outlined the elements. The width of the buttons was also increased to cover the entire row\ninstead of only the text content because some routes have very little text and might have been difficult to select for\nsome users."),(0,o.kt)("p",null,"The route color for yellow/gold is also slightly different on dark theme devices for a better contrast against the dark\nbackground and the other two route colors. All input and button sections have appropriate styles on dark theme as well."),(0,o.kt)("p",null,"Aria descriptions were added to the buttons that the user can be interacted with. For the list of routes the user can\ntake, the list has a description that indicates that the following buttons are route options. Individual routes do not\nhave an aria description because the flow of hearing the description every time interrupts with its content and the\ndescription on the list already explains the purpose of the component."),(0,o.kt)("h2",{id:"future-extensions"},"Future Extensions"),(0,o.kt)("p",null,"This CYOA program can be greatly extended to provide a better user interface! Some significant examples include audio\nsnippets over each passage, a theme changer that can be implemented exclusively for the program or globally over the\nwebsite, instructional information, and more interactive elements on individual passages!"),(0,o.kt)("p",null,"The main goal is to keep the CYOA program modulated and reusable over multiple stories without having to modify existing\ncore algorithms of the program. Internally, it can be a good idea to make the CYOA program take options such as if the\nback and reset button and the progress bar should be displayed for each story that uses the program."),(0,o.kt)("p",null,"Another diagram of \u201cYou Have Created An Imaginary Friend\u201d without the edges back to start (node 1)."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"A directed graph in tree form of the routes.",src:a(3266).Z,width:"1295",height:"1295"})))}u.isMDXComponent=!0},6290:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/cyoa-bubbling-state-history-b43b76a1e67dd7b5f8b9ffc57c0a19ec.png"},3373:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/cyoa-bubbling-state-ce6396406810b0838d85386a23460002.png"},9358:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/imaginary-friend-create-story-3d61a2007fbda249927a7670341f8a70.png"},2683:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/imaginary-friend-graph-tree-back-ebe09cdd3da7a519d506882afb67bf89.png"},3266:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/imaginary-friend-graph-tree-forward-ce8498e9a635bed1527d7cf9afe7d932.png"}}]);